# window.in/window.py
#
# Copyright 2023 Muqtadir
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later

import os
import json

from gi.repository import Adw, Gtk, Gio
from vanilla_tour.slide import Slide

pkgdatadir = '@pkgdatadir@'

gresource = Gio.Resource.load(os.path.join(pkgdatadir, 'vanilla-tour.gresource'))

@Gtk.Template(resource_path='/org/vanillaos/Tour/blp/window.ui')
class VanillaTourWindow(Adw.ApplicationWindow):
    __gtype_name__ = 'VanillaTourWindow'

    carousel = Gtk.Template.Child()
    carousel_indicator_dots = Gtk.Template.Child()
    btn_back = Gtk.Template.Child()
    btn_next = Gtk.Template.Child()

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        self.__build_ui()

        self.btn_back.connect("clicked", self.window_back)
        self.btn_next.connect("clicked", self.window_next)
        self.carousel.connect("page-changed", self.__page_change)

    def __build_ui(self):

        resource_data = gresource.lookup_data("/org/vanillaos/Tour/assets/tour.json", 0)
        content = resource_data.get_data().decode("utf-8")
        recipe = json.loads(content)

        for slide in recipe:
            self.carousel.append(Slide(slide))

    def __page_change(self, *args):
        position = self.carousel.get_position()
        pages = self.carousel.get_n_pages()

        self.btn_back.set_visible(position < pages and position > 0)
        self.btn_next.set_visible(position < pages -1 and position >= 0)


    def window_next(self, *args):
        cur_index = self.carousel.get_position()
        page = self.carousel.get_nth_page(cur_index + 1)
        self.carousel.scroll_to(page, True)

    def window_back(self, *args):
        cur_index = self.carousel.get_position()
        page = self.carousel.get_nth_page(cur_index - 1)
        self.carousel.scroll_to(page, True)
